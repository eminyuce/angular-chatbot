{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/chat/chat.component.ts","./src/app/components/chat/chat.component.html","./src/app/components/pages/login/login.component.ts","./src/app/components/pages/login/login.component.html","./src/app/models/chat-message.ts","./src/app/pages/collapsible-chat/collapsible-chat.component.ts","./src/app/pages/collapsible-chat/collapsible-chat.component.html","./src/app/pages/fixed-chat/fixed-chat.component.ts","./src/app/pages/fixed-chat/fixed-chat.component.html","./src/app/services/auth.service.ts","./src/app/services/chat.service.ts","./src/app/services/token.interceptor.ts","./src/app/shared/enums/display-type.enum.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule, inject } from '@angular/core';\r\nimport { Routes, RouterModule, Router } from '@angular/router';\r\nimport { FixedChatComponent } from './pages/fixed-chat/fixed-chat.component';\r\nimport { CollapsibleChatComponent } from './pages/collapsible-chat/collapsible-chat.component';\r\nimport { DisplayType } from './shared/enums/display-type.enum';\r\nimport { LoginComponent } from './components/pages/login/login.component';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\n\r\nconst routes: Routes = [\r\n  { path: 'login', component: LoginComponent },\r\n\r\n  {\r\n    path: '',\r\n    redirectTo: DisplayType.Fixed.toLowerCase(),\r\n    pathMatch: 'full',\r\n  },\r\n\r\n  {\r\n    path: DisplayType.Fixed.toLowerCase(),\r\n    component: FixedChatComponent,\r\n    // You can add a guard here like below if needed:\r\n\r\n      canActivate: [() => {\r\n        const auth = inject(AuthService);\r\n        const router = inject(Router);\r\n        return auth.isLoggedIn() || router.createUrlTree(['/login']);\r\n      }] \r\n  },\r\n\r\n\r\n  {\r\n    path: DisplayType.Collapsible.toLowerCase(),\r\n    component: CollapsibleChatComponent\r\n  },\r\n\r\n  { path: '**', redirectTo: DisplayType.Fixed.toLowerCase() }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Location } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { DisplayType } from './shared/enums/display-type.enum';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  public email = environment.email;\r\n  public copyEmail = false;\r\n  public displayType = DisplayType;\r\n  public display = DisplayType.Fixed;\r\n\r\n  constructor(private location: Location) {\r\n    const path = this.location.path().split('/')[1];\r\n    this.display =  path ? path as DisplayType : this.display;\r\n  }\r\n\r\n  public onClickCopyEmail(): void {\r\n    this.copyEmail = true;\r\n\r\n    setTimeout(() => {\r\n      this.copyEmail = false;\r\n   }, 2000);\r\n  }\r\n\r\n  public onClickRedirectGithub(): void {\r\n    window.open(environment.githubUrl,'_blank');\r\n  }\r\n}\r\n","<div class=\"full-width full-height\">\r\n  <div class=\"app-header display-flex -row -center\">\r\n    <span class=\"header-title display-flex -center\">\r\n      Angular Chatbot Example\r\n    </span>\r\n    <div class=\"header-actions display-flex -center\">\r\n        <div class=\"chat-buttons\">\r\n          <div class=\"button-container\">\r\n            <input id=\"fixed-chat\" type=\"radio\" name=\"display-button\" value=\"{{displayType.Fixed}}\" routerLink=\"{{displayType.Fixed}}\" [checked]=\"display === displayType.Fixed\"/>\r\n            <label for=\"fixed-chat\">Fixed</label>\r\n          </div>\r\n          <div class=\"button-container\">\r\n            <input id=\"collapsible-chat\" type=\"radio\" name=\"display-button\" value=\"{{displayType.Collapsible}}\" routerLink=\"{{displayType.Collapsible}}\" [checked]=\"display === displayType.Collapsible\"/>\r\n            <label for=\"collapsible-chat\">Collapsible</label>\r\n          </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"app-socials display-flex full-height\">\r\n      <div class=\"socials-icons display-flex -column -center full-height\">\r\n        <div class=\"display-flex -center\">\r\n          <img class=\"icon\" src=\"./assets/github-logo.png\" (click)=\"onClickRedirectGithub()\">\r\n        </div>\r\n        <div class=\"display-flex -center\">\r\n          <img class=\"icon\" src=\"./assets/mail.png\" [cdkCopyToClipboard]=\"email\" (click)=\"onClickCopyEmail()\">\r\n          <span class=\"copy-alert\" *ngIf=\"copyEmail\">Copied email!</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <router-outlet></router-outlet>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\n\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\n// Angular Material Modules\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { ClipboardModule } from '@angular/cdk/clipboard';\r\n\r\n// Components\r\nimport { FixedChatComponent } from './pages/fixed-chat/fixed-chat.component';\r\nimport { CollapsibleChatComponent } from './pages/collapsible-chat/collapsible-chat.component';\r\nimport { ChatComponent } from './components/chat/chat.component';\r\nimport { LoginComponent } from './components/pages/login/login.component';\r\n\r\n// Services\r\nimport { TokenInterceptor } from './services/token.interceptor';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    FixedChatComponent,\r\n    CollapsibleChatComponent,\r\n    ChatComponent,\r\n    LoginComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    ClipboardModule,\r\n    MatCardModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: TokenInterceptor,\r\n      multi: true\r\n    }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { AfterViewChecked, Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { UntypedFormGroup, UntypedFormBuilder } from '@angular/forms';\r\nimport { ChatService } from '../../services/chat.service';\r\nimport { ChatRole, IChatMessage } from '../../models/chat-message';\r\nimport { EventResponse } from '../../models/event-response';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\n\r\nclass Message {\r\n  text?: string;\r\n  type: MessageType;\r\n}\r\n\r\nenum MessageType {\r\n  Bot = 'bot',\r\n  User = 'user',\r\n  Loading = 'loading'\r\n}\r\n\r\n@Component({\r\n  selector: 'app-chat',\r\n  templateUrl: './chat.component.html',\r\n  styleUrls: ['./chat.component.scss']\r\n})\r\nexport class ChatComponent implements OnInit, AfterViewChecked {\r\n  @ViewChild('messageContainer') private messageContainer: ElementRef;\r\n  @Input() public display: string;\r\n\r\n  public form: UntypedFormGroup;\r\n  public messages: Array<Message> = [];\r\n  private canSendMessage = true;\r\n\r\n  constructor(private formBuilder: UntypedFormBuilder, \r\n    private chatService: ChatService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.form = this.formBuilder.group({\r\n      message: ['']\r\n    });\r\n    \r\n    // Optional: preload welcome message\r\n    // this.getBotMessage(); \r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  public onClickSendMessage(): void {\r\n    const message = this.form.get('message').value;\r\n\r\n    if (message && this.canSendMessage) {\r\n      const userMessage: Message = { text: message, type: MessageType.User };\r\n      this.messages.push(userMessage);\r\n\r\n      this.form.get('message').setValue('');\r\n      this.form.updateValueAndValidity();\r\n      this.getBotMessage();\r\n    }\r\n  }\r\n\r\n  createDefaultMessage(content: string,prompt: string): IChatMessage {\r\n    return {\r\n      id: this.generateUUID(),\r\n      chatId: this.generateUUID(),\r\n      userId: 'user-uuid', // Replace with actual user ID\r\n      userName: 'User',    // Replace with actual username\r\n      content: content,\r\n      prompt: prompt,\r\n      role: ChatRole.USER,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  private generateUUID(): string {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n      const r = Math.random() * 16 | 0;\r\n      const v = c === 'x' ? r : (r & 0x3 | 0x8);\r\n      return v.toString(16);\r\n    });\r\n  }\r\n  \r\n  private getBotMessage(): void {\r\n    this.canSendMessage = false;\r\n    const waitMessage: Message = { type: MessageType.Loading };\r\n    this.messages.push(waitMessage);\r\n\r\n    // Create a placeholder for the bot's full response *before* subscribing\r\n    const botMessagePlaceholder: Message = { text: '', type: MessageType.Bot };\r\n    let placeholderAdded = false; // Flag to track if we added the placeholder\r\n    let botMessageIndex = -1;     // To store the index of the placeholder\r\n\r\n    const lastUserMessage = this.messages.filter(m => m.type === MessageType.User).pop()?.text;\r\n\r\n    if (!lastUserMessage) {\r\n      console.warn(\"No user message found to send.\");\r\n      this.messages.pop(); // Remove loading message\r\n      this.canSendMessage = true;\r\n      return; // Exit if there's nothing to send\r\n    }\r\n    var chatMessage = this.createDefaultMessage(\"\",lastUserMessage);\r\n    this.chatService.getToolResponseStream(chatMessage).subscribe({\r\n      next: (event: MessageEvent) => {\r\n        const response: EventResponse = event.data;\r\n        // --- Action on receiving data chunk ---\r\n        console.log('Stream event received:', event);\r\n        const chunk = response.content; // Assuming backend sends string chunks\r\n\r\n        // 1. Remove Loading & Add Placeholder (only on the first chunk)\r\n        if (!placeholderAdded) {\r\n          const loadingIndex = this.messages.findIndex(m => m.type === MessageType.Loading);\r\n          if (loadingIndex !== -1) {\r\n            this.messages.splice(loadingIndex, 1); // Remove loading\r\n          }\r\n          this.messages.push(botMessagePlaceholder); // Add the empty bot message bubble\r\n          botMessageIndex = this.messages.length - 1; // Get its index\r\n          placeholderAdded = true;\r\n        }\r\n\r\n        // 2. Append data chunk to the placeholder message\r\n        if (botMessageIndex !== -1 && this.messages[botMessageIndex]) {\r\n           // Ensure text is initialized\r\n           this.messages[botMessageIndex].text = (this.messages[botMessageIndex].text || '') + chunk;\r\n        } else if (placeholderAdded) {\r\n           console.error(\"Error: Bot message placeholder was added but cannot be found.\");\r\n           // Fallback: create a new message? Might lead to multiple bubbles.\r\n           // const fallbackMsg: Message = { text: chunk, type: MessageType.Bot };\r\n           // this.messages.push(fallbackMsg);\r\n        }\r\n        // Do NOT re-enable sending here - wait for complete/error\r\n      },\r\n      error: (error) => {\r\n        // --- Action on stream error ---\r\n        console.error('Error from backend stream:', error);\r\n        // Remove loading message if it's still there\r\n        const loadingIndex = this.messages.findIndex(m => m.type === MessageType.Loading);\r\n        if (loadingIndex !== -1) {\r\n          this.messages.splice(loadingIndex, 1);\r\n        }\r\n        // Add a distinct error message bubble\r\n        const errorMessage: Message = { text: 'Sorry, an error occurred while getting the response.', type: MessageType.Bot };\r\n        this.messages.push(errorMessage);\r\n        this.canSendMessage = true; // Allow sending again after error\r\n      },\r\n      complete: () => {\r\n        // --- Action on stream completion ---\r\n        console.log('Stream completed successfully.');\r\n        // Ensure loading is removed (safety check)\r\n        if (!placeholderAdded) {\r\n           const loadingIndex = this.messages.findIndex(m => m.type === MessageType.Loading);\r\n           if (loadingIndex !== -1) {\r\n              this.messages.splice(loadingIndex, 1); // Remove loading\r\n           }\r\n           // If the stream completed *without sending any data*\r\n           if (botMessageIndex === -1) {\r\n               const noDataMsg: Message = { text: \"[No response received]\", type: MessageType.Bot };\r\n               this.messages.push(noDataMsg);\r\n           }\r\n        }\r\n        // If placeholder was added but remains empty after completion\r\n        else if (botMessageIndex !== -1 && this.messages[botMessageIndex]?.text === '') {\r\n             console.warn(\"Stream completed but no text content received.\");\r\n             this.messages[botMessageIndex].text = \"[Empty response]\";\r\n        }\r\n\r\n        this.canSendMessage = true; // IMPORTANT: Allow sending ONLY when stream is fully complete\r\n      }\r\n    });\r\n }\r\n\r\n  public onClickEnter(event: KeyboardEvent): void {\r\n    if (event.key === 'Enter' && !event.shiftKey) {\r\n      event.preventDefault();\r\n      this.onClickSendMessage();\r\n    }\r\n  }\r\n\r\n  private scrollToBottom(): void {\r\n    try {\r\n      this.messageContainer.nativeElement.scrollTop = this.messageContainer.nativeElement.scrollHeight;\r\n    } catch (err) {\r\n      console.warn('Failed to scroll:', err);\r\n    }\r\n  }\r\n}\r\n","  <!-- Chat Component Template -->\r\n  <form [formGroup]=\"form\" class=\"chat-wrapper\">\r\n    <mat-card class=\"chat-card\" [ngClass]=\"display\">\r\n      <mat-card-header class=\"chat-header\">\r\n        <div class=\"chat-header-left\">\r\n          <img mat-card-avatar src=\"./assets/bot.png\" alt=\"Chatbot\" class=\"chat-icon\" />\r\n          <div>\r\n            <mat-card-title class=\"chat-title\">Chatbot</mat-card-title>\r\n            <mat-card-subtitle class=\"chat-subtitle\">\r\n              <span class=\"status-icon online\"></span>\r\n              <span>Online</span>\r\n            </mat-card-subtitle>\r\n          </div>\r\n        </div>\r\n      </mat-card-header>\r\n\r\n      <mat-card-content class=\"chat-messages\" #messageContainer>\r\n        <div *ngFor=\"let message of messages\" class=\"message-wrapper\">\r\n          <ng-container [ngSwitch]=\"message.type\">\r\n            <!-- User Message -->\r\n            <div *ngSwitchCase=\"'user'\" class=\"message user\">\r\n              {{ message.text }}\r\n            </div>\r\n            <!-- Bot Message -->\r\n            <div *ngSwitchCase=\"'bot'\" class=\"message bot\">\r\n              {{ message.text }}\r\n            </div>\r\n            <!-- Loading Animation -->\r\n            <div *ngSwitchCase=\"'loading'\" class=\"message loading\">\r\n              <div class=\"loading-dots\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n        </div>\r\n      </mat-card-content>\r\n\r\n      <mat-card-actions class=\"chat-input-wrapper\">\r\n        <mat-form-field appearance=\"outline\" class=\"chat-input-field\">\r\n          <textarea\r\n            matInput\r\n            formControlName=\"message\"\r\n            placeholder=\"Type your message...\"\r\n            class=\"chat-input\"\r\n            (keydown.enter)=\"onClickEnter($event)\"\r\n            rows=\"1\"\r\n          ></textarea>\r\n          <button\r\n            mat-icon-button\r\n            matSuffix\r\n            (click)=\"onClickSendMessage()\"\r\n            aria-label=\"Send message\"\r\n          >\r\n            <mat-icon>send</mat-icon>\r\n          </button>\r\n        </mat-form-field>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </form>","import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from 'src/app/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent {\r\n  loginForm: FormGroup;\r\n  errorMessage: string = '';\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router\r\n  ) {\r\n    this.loginForm = this.fb.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.loginForm.invalid) return;\r\n\r\n    const { username, password } = this.loginForm.value;\r\n\r\n    this.authService.login(username, password).subscribe({\r\n      next: () => {\r\n        this.errorMessage = '';\r\n        this.router.navigate(['/fixed-chat']); // Navigate to chatbot or main app\r\n      },\r\n      error: err => {\r\n        this.errorMessage = err.message || 'Login failed';\r\n      }\r\n    });\r\n  }\r\n}\r\n","<div class=\"login-wrapper\">\r\n  <mat-card class=\"login-card\">\r\n    <mat-card-header>\r\n      <mat-card-title>Welcome Back</mat-card-title>\r\n      <mat-card-subtitle>Please sign in to continue</mat-card-subtitle>\r\n    </mat-card-header>\r\n\r\n    <mat-card-content>\r\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\" class=\"login-form\">\r\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n          <mat-label>Username</mat-label>\r\n          <input matInput formControlName=\"username\" required autocomplete=\"username\" />\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n          <mat-label>Password</mat-label>\r\n          <input\r\n            matInput\r\n            type=\"password\"\r\n            formControlName=\"password\"\r\n            required\r\n            autocomplete=\"current-password\"\r\n          />\r\n        </mat-form-field>\r\n\r\n        <div class=\"error-message\" *ngIf=\"errorMessage\">\r\n          <mat-icon color=\"warn\">error_outline</mat-icon>\r\n          {{ errorMessage }}\r\n        </div>\r\n\r\n        <button\r\n          mat-raised-button\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          class=\"login-button\"\r\n          [disabled]=\"loginForm.invalid\"\r\n        >\r\n          Login\r\n        </button>\r\n      </form>\r\n    </mat-card-content>\r\n\r\n    <mat-card-actions class=\"login-actions\">\r\n      <a routerLink=\"/forgot-password\" class=\"forgot-link\">Forgot password?</a>\r\n      <span class=\"spacer\"></span>\r\n      <a routerLink=\"/register\" class=\"register-link\">Create account</a>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n</div>\r\n","// chat.model.ts\r\nexport enum ChatRole {\r\n  USER = 0,\r\n  ASSISTANT = 1\r\n}\r\n\r\nexport interface IChatMessage {\r\n  id: string;           // UUID as string\r\n  chatId: string;       // UUID as string\r\n  userId: string;       // UUID as string\r\n  userName: string;\r\n  content: string;\r\n  prompt: string;\r\n  role: ChatRole;\r\n  timestamp: string;    // ISO-8601 format\r\n}","import { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { Component } from '@angular/core';\r\nimport { DisplayType } from 'src/app/shared/enums/display-type.enum';\r\n\r\n@Component({\r\n  selector: 'app-collapsible-chat',\r\n  templateUrl: './collapsible-chat.component.html',\r\n  styleUrls: ['./collapsible-chat.component.scss'],\r\n  animations: [\r\n    trigger('rotateAnimation', [\r\n      state('rotated', style({ transform: 'rotate(0deg)' })),\r\n      state('default', style({ transform: 'rotate(-360deg)' })),\r\n      transition('default => rotated', animate('500ms ease-out')),\r\n      transition('rotated => default', animate('500ms ease-out')),\r\n    ]),\r\n    trigger('fadeAnimation', [\r\n      transition(\":enter\", [\r\n        style({ opacity: 0 }), \r\n        animate(\r\n          \"150ms ease-in-out\",\r\n          style({ opacity: 1})\r\n        )\r\n      ]),\r\n      transition(\":leave\", [\r\n        style({ opacity: 1}), \r\n        animate(\r\n          \"150ms ease-in-out\",\r\n          style({ opacity: 0,})\r\n        )\r\n      ])\r\n    ]),\r\n  ]\r\n})\r\nexport class CollapsibleChatComponent {\r\n  private readonly botIconPath = './assets/bot.png';\r\n  private readonly chatIconPath = './assets/chat.png';\r\n\r\n  public isOpen = false;\r\n  public iconSrc = this.botIconPath;\r\n  public iconState = 'default';\r\n\r\n  public displayType = DisplayType;\r\n  \r\n  public onChangeChatState(): void {\r\n    this.isOpen = !this.isOpen;\r\n    this.iconState = (this.iconState === 'default' ? 'rotated' : 'default');\r\n\r\n    if (this.isOpen) this.iconSrc = this.chatIconPath;\r\n    else this.iconSrc = this.botIconPath;\r\n  }\r\n}\r\n","<button \r\n    class=\"chat-button\" \r\n    matSuffix \r\n    mat-fab\r\n    (click)=\"onChangeChatState()\"\r\n    [disableRipple]=\"true\">\r\n    <img [src]=\"iconSrc\" [@rotateAnimation]=\"iconState\" [ngClass]=\"isOpen ? 'button-icon chat' : 'button-icon bot'\"> \r\n</button>\r\n<app-chat *ngIf=\"isOpen\" [display]=\"displayType.Collapsible\" [@fadeAnimation]></app-chat>\r\n","import { Component } from '@angular/core';\r\nimport { DisplayType } from 'src/app/shared/enums/display-type.enum';\r\n\r\n@Component({\r\n  selector: 'app-fixed-chat',\r\n  templateUrl: './fixed-chat.component.html',\r\n  styleUrls: ['./fixed-chat.component.scss']\r\n})\r\nexport class FixedChatComponent {\r\n  public displayType = DisplayType;\r\n}\r\n","<app-chat [display]=\"displayType.Fixed\"></app-chat>\r\n","// auth.service.ts\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError, BehaviorSubject, of } from 'rxjs';\r\nimport { catchError, tap, switchMap } from 'rxjs/operators';\r\nimport { JwtHelperService } from '@auth0/angular-jwt';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n  private baseUrl = 'http://localhost:8080/auth';\r\n  private tokenKey = 'jwt_token';\r\n  private jwtHelper = new JwtHelperService();\r\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\r\n  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {}\r\n \r\n\r\n  isLoggedIn(): boolean {\r\n    const token = this.getToken();\r\n    console.log(\"token:\", token);\r\n    return !!localStorage.getItem(this.tokenKey);\r\n  }\r\n  // Called during app initialization\r\n  initAuth(): Observable<boolean> {\r\n    const token = this.getToken();\r\n    console.log(\"token:\", token);\r\n    if (token && !this.jwtHelper.isTokenExpired(token)) {\r\n      // Existing valid token\r\n      this.isAuthenticatedSubject.next(true);\r\n      return of(true);\r\n    }\r\n\r\n    // Attempt authentication with hardcoded credentials\r\n    const credentials = { username: 'angular-user', password: 'angular-pass' };\r\n    return this.login(credentials.username, credentials.password).pipe(\r\n      switchMap(() => {\r\n        this.isAuthenticatedSubject.next(true);\r\n        return of(true);\r\n      }),\r\n      catchError((error) => {\r\n        console.error('Startup authentication failed:', error.message);\r\n        this.isAuthenticatedSubject.next(false);\r\n        return of(false); // Continue app startup even if auth fails\r\n      })\r\n    );\r\n  }\r\n\r\n  login(username: string, password: string): Observable<{ token: string }> {\r\n    return this.http\r\n      .post<{ token: string }>(`${this.baseUrl}/login-angular`, { username, password })\r\n      .pipe(\r\n        tap(response => {\r\n          if (response.token) {\r\n            localStorage.setItem(this.tokenKey, response.token);\r\n            this.isAuthenticatedSubject.next(true);\r\n          } else {\r\n            throw new Error('Invalid credentials');\r\n          }\r\n        }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem(this.tokenKey);\r\n    this.isAuthenticatedSubject.next(false);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.tokenKey);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    const token = this.getToken();\r\n    return token != null && !this.jwtHelper.isTokenExpired(token);\r\n  }\r\n\r\n  getRoles(): string[] {\r\n    const token = this.getToken();\r\n    if (token) {\r\n      const decoded = this.jwtHelper.decodeToken(token);\r\n      return decoded.roles || [];\r\n    }\r\n    return [];\r\n  }\r\n\r\n  hasRole(role: string): boolean {\r\n    return this.getRoles().includes(`ROLE_${role}`);\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse): Observable<never> {\r\n    let errorMessage = 'An error occurred';\r\n    if (error.status === 400) {\r\n      errorMessage = 'Invalid username or password';\r\n    } else if (error.status === 0) {\r\n      errorMessage = 'Network error: Please check your connection';\r\n    }\r\n    return throwError(() => new Error(errorMessage));\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { ChatRole, IChatMessage } from '../models/chat-message';\r\nimport { EventResponse } from '../models/event-response';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatService {\r\n  private baseUrl = 'http://localhost:8080/gen-ai';\r\n\r\n  constructor(private http: HttpClient, private authService: AuthService) {}\r\n\r\n  /**\r\n   * Gets AI tool response using Server-Sent Events (SSE)\r\n   */\r\n  getToolResponseStream(chatMessage: IChatMessage): Observable<MessageEvent> {\r\n    return new Observable<MessageEvent>((observer) => {\r\n      // For SSE with POST requests, we need EventSource polyfill or custom implementation\r\n      // This implementation uses fetch with SSE handling\r\n      // const fetchUrl = `${this.baseUrl}/ask-ai-tool`;\r\n      const fetchUrl = `${this.baseUrl}/ask-ai-stream`;\r\n\r\n      const headers = new Headers({\r\n        'Content-Type': 'application/json',\r\n        'Accept': 'text/event-stream',\r\n        'Authorization': `Bearer ${this.authService.getToken()}`\r\n      });\r\n      \r\n      const fetchPromise = fetch(fetchUrl, {\r\n        method: 'POST',\r\n        headers: headers,\r\n        body: JSON.stringify(chatMessage),\r\n        cache: 'no-cache'\r\n      });\r\n      \r\n      fetchPromise.then(response => {\r\n        if (!response.ok) {\r\n          observer.error(`HTTP error! Status: ${response.status}`);\r\n          return;\r\n        }\r\n        \r\n        if (!response.body) {\r\n          observer.error('Response body is null');\r\n          return;\r\n        }\r\n        \r\n        const reader = response.body.getReader();\r\n        const decoder = new TextDecoder();\r\n        \r\n        function processStreamChunk() {\r\n          reader.read().then(({ done, value }) => {\r\n            if (done) {\r\n              observer.complete();\r\n              return;\r\n            }\r\n            \r\n            const chunk = decoder.decode(value, { stream: true });\r\n            const lines = chunk.split('\\n\\n');\r\n            \r\n            lines.forEach(line => {\r\n              if (line.trim() !== '') {\r\n                // Parse SSE format\r\n                const eventData = line.split('\\n')\r\n                  .reduce((acc, part) => {\r\n                    const colonIndex = part.indexOf(':');\r\n                    if (colonIndex > 0) {\r\n                      const field = part.substring(0, colonIndex).trim();\r\n                      const value = part.substring(colonIndex + 1).trim();\r\n                      acc[field] = value;\r\n                    }\r\n                    return acc;\r\n                  }, {} as Record<string, string>);\r\n                \r\n                  try{\r\n                    \r\n                      const parsedData: EventResponse = JSON.parse(eventData.data);\r\n                      const event = new MessageEvent(eventData.event || 'message', {\r\n                        data: parsedData\r\n                      });\r\n                      \r\n                      observer.next(event);\r\n\r\n                  } catch (err) {\r\n                    console.error('JSON parse error for SSE event:', err);\r\n                  }\r\n\r\n              }\r\n            });\r\n            \r\n            processStreamChunk();\r\n          }).catch(err => {\r\n            observer.error(err);\r\n          });\r\n        }\r\n        \r\n        processStreamChunk();\r\n      }).catch(err => {\r\n        observer.error(err);\r\n      });\r\n      \r\n      return () => {\r\n        // Nothing to clean up for fetch implementation\r\n        console.log('Stream connection closed');\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Alternative method using standard HTTP POST\r\n   * Useful for non-streaming responses or when SSE is not needed\r\n   */\r\n  askAgent(chatMessage: IChatMessage): Observable<any> {\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json'\r\n    });\r\n    \r\n    return this.http.post(\r\n      `${this.baseUrl}/ask-ai-tool`, \r\n      chatMessage, \r\n      { \r\n        headers: headers,\r\n        responseType: 'text', \r\n        reportProgress: true, \r\n        observe: 'events' \r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  getResponseStream(question: string): Observable<MessageEvent> {\r\n    return new Observable<MessageEvent>((observer) => {\r\n      // Ensure the URL is correct - verify the base path and endpoint\r\n      const eventSource = new EventSource(`${this.baseUrl}/ask-ai-stream?prompt=${encodeURIComponent(question)}`);\r\n\r\n      // Listener for SPECIFICALLY named 'weather' events\r\n      eventSource.addEventListener('weather', (event) => {\r\n        console.log('Received \"weather\" event:', event);\r\n        //console.log('Data:', event.data); // Access the data payload\r\n        observer.next(event as MessageEvent); // Cast is safe here\r\n      });\r\n\r\n      // Listener for any OTHER named events (if backend sends more types)\r\n      eventSource.addEventListener('message', (event) => { // Example for 'message' event\r\n        console.log('Received \"message\" event:', event);\r\n        console.log('Data:', event.data);\r\n        observer.next(event as MessageEvent);\r\n      });\r\n\r\n      // Optional: Keep onmessage for UNNAMED events (if backend might send those)\r\n      // eventSource.onmessage = (event) => {\r\n      //   console.log('Received unnamed event:', event);\r\n      //   observer.next(event);\r\n      // };\r\n\r\n      eventSource.onerror = (err) => {\r\n        console.error('EventSource failed:', err);\r\n        // Don't close the source here if you want automatic reconnection (default EventSource behavior)\r\n        // Only close if the error is fatal or you want to stop trying.\r\n        // eventSource.close();\r\n        observer.error(err);\r\n      };\r\n\r\n      eventSource.onopen = () => {\r\n        console.log('EventSource connection opened');\r\n      };\r\n\r\n      // Cleanup when the Observable is unsubscribed\r\n      return () => {\r\n        if (eventSource.readyState !== EventSource.CLOSED) {\r\n             eventSource.close();\r\n             console.log('EventSource connection closed');\r\n        }\r\n      };\r\n    });\r\n  }\r\n}","import {\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError, of } from 'rxjs';\r\nimport { catchError, switchMap } from 'rxjs/operators';\r\nimport { AuthService } from './auth.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n\r\n  \r\n  constructor(private authService: AuthService, private router: Router) {\r\n    console.log('TokenInterceptor instantiated');\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    console.log('TokenInterceptor engaged:', req.url); // <-- Check if this appears\r\n    // Your interceptor logic\r\n\r\n    // Skip auth header for login or auth endpoints\r\n    if (req.url.includes('/auth')) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    const token = this.authService.getToken();\r\n    const authReq = token\r\n      ? req.clone({ setHeaders: { Authorization: `Bearer ${token}` } })\r\n      : req;\r\n\r\n    return next.handle(authReq).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        console.log(error);\r\n        if (error.status === 401) {\r\n          // Attempt silent re-auth\r\n          return this.authService.initAuth().pipe(\r\n            switchMap((success: boolean) => {\r\n              if (success) {\r\n                const newToken = this.authService.getToken();\r\n                const retryReq = req.clone({\r\n                  setHeaders: {\r\n                    Authorization: `Bearer ${newToken}`\r\n                  }\r\n                });\r\n                return next.handle(retryReq);\r\n              } else {\r\n                this.authService.logout();\r\n                this.router.navigate(['/login']);\r\n                return throwError(() => new Error('Authentication failed'));\r\n              }\r\n            }),\r\n            catchError(() => {\r\n              this.authService.logout();\r\n              this.router.navigate(['/login']);\r\n              return throwError(() => new Error('Authentication failed'));\r\n            })\r\n          );\r\n        } else if (error.status === 403) {\r\n          // Access Denied\r\n          this.authService.logout();\r\n          this.router.navigate(['/login']);\r\n          return throwError(() => new Error('Access denied: Insufficient permissions'));\r\n        }\r\n\r\n        // Other errors\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n}\r\n","export enum DisplayType {\r\n    Fixed = 'fixed-chat',\r\n    Collapsible = 'collapsible-chat'\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  email: 'leticiamichelin@outlook.com',\r\n  githubUrl: 'https://github.com/leticiabma'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":["inject","RouterModule","Router","FixedChatComponent","CollapsibleChatComponent","DisplayType","LoginComponent","AuthService","routes","path","component","redirectTo","Fixed","toLowerCase","pathMatch","canActivate","auth","router","isLoggedIn","createUrlTree","Collapsible","AppRoutingModule","forRoot","imports","i1","exports","environment","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","AppComponent","constructor","location","email","copyEmail","displayType","display","split","onClickCopyEmail","setTimeout","onClickRedirectGithub","window","open","githubUrl","ɵɵdirectiveInject","Location","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelement","ɵɵlistener","AppComponent_Template_img_click_17_listener","AppComponent_Template_img_click_19_listener","ɵɵtemplate","AppComponent_span_20_Template","ɵɵadvance","ɵɵpropertyInterpolate","ɵɵproperty","BrowserModule","BrowserAnimationsModule","ReactiveFormsModule","HttpClientModule","HTTP_INTERCEPTORS","MatCardModule","MatFormFieldModule","MatInputModule","MatButtonModule","MatIconModule","ClipboardModule","ChatComponent","TokenInterceptor","AppModule","bootstrap","provide","useClass","multi","declarations","ChatRole","ɵɵtextInterpolate1","message_r2","text","ɵɵelementContainerStart","ChatComponent_div_14_div_2_Template","ChatComponent_div_14_div_3_Template","ChatComponent_div_14_div_4_Template","type","Message","MessageType","formBuilder","chatService","messages","canSendMessage","ngOnInit","form","group","message","ngAfterViewChecked","scrollToBottom","onClickSendMessage","get","value","userMessage","User","push","setValue","updateValueAndValidity","getBotMessage","createDefaultMessage","content","prompt","id","generateUUID","chatId","userId","userName","role","USER","timestamp","Date","toISOString","replace","c","r","Math","random","v","toString","waitMessage","Loading","botMessagePlaceholder","Bot","placeholderAdded","botMessageIndex","lastUserMessage","filter","m","pop","console","warn","chatMessage","getToolResponseStream","subscribe","next","event","response","data","log","chunk","loadingIndex","findIndex","splice","length","error","errorMessage","complete","noDataMsg","onClickEnter","key","shiftKey","preventDefault","messageContainer","nativeElement","scrollTop","scrollHeight","err","UntypedFormBuilder","i2","ChatService","viewQuery","ChatComponent_Query","ChatComponent_div_14_Template","ChatComponent_Template_textarea_keydown_enter_17_listener","$event","ɵɵrestoreView","_r1","ɵɵresetView","ChatComponent_Template_button_click_18_listener","Validators","ctx_r0","fb","authService","loginForm","username","required","password","onSubmit","invalid","login","navigate","FormBuilder","i3","LoginComponent_Template","LoginComponent_Template_form_ngSubmit_8_listener","LoginComponent_div_17_Template","animate","state","style","transition","trigger","undefined","botIconPath","chatIconPath","isOpen","iconSrc","iconState","onChangeChatState","CollapsibleChatComponent_Template","CollapsibleChatComponent_Template_button_click_0_listener","CollapsibleChatComponent_app_chat_2_Template","ɵɵsanitizeUrl","transform","opacity","FixedChatComponent_Template","throwError","BehaviorSubject","of","catchError","tap","switchMap","JwtHelperService","http","baseUrl","tokenKey","jwtHelper","isAuthenticatedSubject","isAuthenticated$","asObservable","token","getToken","localStorage","getItem","initAuth","isTokenExpired","credentials","pipe","post","setItem","Error","handleError","logout","removeItem","isAuthenticated","getRoles","decoded","decodeToken","roles","hasRole","includes","status","ɵɵinject","HttpClient","factory","ɵfac","providedIn","Observable","HttpHeaders","observer","fetchUrl","headers","Headers","fetchPromise","fetch","method","body","JSON","stringify","cache","then","ok","reader","getReader","decoder","TextDecoder","processStreamChunk","read","done","decode","stream","lines","forEach","line","trim","eventData","reduce","acc","part","colonIndex","indexOf","field","substring","parsedData","parse","MessageEvent","catch","askAgent","responseType","reportProgress","observe","getResponseStream","question","eventSource","EventSource","encodeURIComponent","addEventListener","onerror","onopen","readyState","CLOSED","close","intercept","req","url","handle","authReq","clone","setHeaders","Authorization","success","newToken","retryReq","production","enableProdMode","__NgCli_bootstrap_1","platformBrowser","bootstrapModule"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}